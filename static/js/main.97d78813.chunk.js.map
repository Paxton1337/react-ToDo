{"version":3,"sources":["context.js","Todo/TodoItem.js","Todo/TodoList.js","Todo/AddTodo.js","App.js","serviceWorker.js","index.js"],"names":["Context","React","createContext","styles","li","display","justifyContent","alignItems","padding","border","borderRadius","marginBottom","input","marginRight","TodoItem","todo","index","handleChange","removeTodo","useContext","calsses","completed","push","style","className","join","type","checked","onChange","id","title","onClick","ul","listStyle","margin","TodoList","props","todos","map","key","onToggle","AddTodo","onCreate","useState","value","setValue","onSubmit","e","preventDefault","trim","placeholder","target","App","setTodos","Provider","filter","concat","Date","now","length","paddingLeft","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gLAIeA,EAFCC,IAAMC,gBCChBC,EAAS,CACbC,GAAI,CACFC,QAAS,OACTC,eAAgB,gBAChBC,WAAY,SACZC,QAAS,aACTC,OAAQ,iBACRC,aAAc,MACdC,aAAc,SAEhBC,MAAO,CACLC,YAAa,SAIJC,EAAW,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,KAAMC,EAA0B,EAA1BA,MAAOC,EAAmB,EAAnBA,aAC9BC,EAAeC,qBAAWnB,GAA1BkB,WACFE,EAAU,GAKhB,OAHIL,EAAKM,WACPD,EAAQE,KAAK,QAGb,wBAAIC,MAAOpB,EAAOC,IAChB,0BAAMoB,UAAWJ,EAAQK,KAAK,MAC5B,2BACEC,KAAK,WACLC,QAASZ,EAAKM,UACdE,MAAOpB,EAAOS,MACdgB,SAAU,kBAAMX,EAAaF,EAAKc,OAEpC,gCAASb,EAAQ,GAPnB,OASGD,EAAKe,OAER,4BAAQN,UAAU,KAAKO,QAAS,kBAAMb,EAAWH,EAAKc,MAAtD,UCnCA1B,EAAS,CACb6B,GAAI,CACFC,UAAW,OACXC,OAAQ,EACR1B,QAAS,IAIA2B,EAAW,SAACC,GACvB,OACE,wBAAIb,MAAOpB,EAAO6B,IACfI,EAAMC,MAAMC,KAAI,SAACvB,EAAMC,GACtB,OACE,kBAAC,EAAD,CACED,KAAMA,EACNwB,IAAKxB,EAAKc,GACVb,MAAOA,EACPC,aAAcmB,EAAMI,gBClBnBC,EAAU,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EACbC,mBAAS,IADI,mBAChCC,EADgC,KACzBC,EADyB,KAYvC,OACE,0BACEC,SAXiB,SAACC,GACpBA,EAAEC,iBAEEJ,EAAMK,SACRP,EAASE,GACTC,EAAS,MAOTtB,MAAO,CAACZ,aAAc,WAEtB,2BACEuC,YAAY,mBACZN,MAAOA,EACPhB,SAAU,gBAAGuB,EAAH,EAAGA,OAAH,OAAgBN,EAASM,EAAOP,QAC1CpB,UAAU,kBAEZ,4BAAQE,KAAK,SAASF,UAAU,kBAAhC,eCyBS4B,MA7Cf,WAAgB,IAAD,EACaT,mBAAS,IADtB,mBACNN,EADM,KACCgB,EADD,KA8Bb,OACE,kBAAC,EAAQC,SAAT,CAAkBV,MAAO,CAAE1B,WAjBV,SAACW,GAClBwB,EAAShB,EAAMkB,QAAO,SAACxC,GAAD,OAAUA,EAAKc,KAAOA,SAiB1C,yBAAKL,UAAU,WACb,qCACA,kBAAC,EAAD,CAASkB,SAhBC,SAACZ,GACfuB,EACEhB,EAAMmB,OAAO,CACX,CACE1B,QACAD,GAAI4B,KAAKC,MACTrC,WAAW,SAWZgB,EAAMsB,OACL,kBAAC,EAAD,CAAUtB,MAAOA,EAAOG,SAjCb,SAACX,GAClBwB,EACEhB,EAAMC,KAAI,SAACvB,GAIT,OAHIA,EAAKc,KAAOA,IACdd,EAAKM,WAAaN,EAAKM,WAElBN,SA6BL,uBAAGQ,MAAO,CAAEqC,YAAa,SAAzB,qBC/BUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.97d78813.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Context = React.createContext();\r\n\r\nexport default Context;\r\n","import React, { useContext } from \"react\";\r\nimport Context from \"../context\";\r\n\r\nconst styles = {\r\n  li: {\r\n    display: \"flex\",\r\n    justifyContent: \"space-between\",\r\n    alignItems: \"center\",\r\n    padding: \".5rem 1rem\",\r\n    border: \"1px solid #ccc\",\r\n    borderRadius: \"4px\",\r\n    marginBottom: \".5rem\",\r\n  },\r\n  input: {\r\n    marginRight: \"1rem\",\r\n  },\r\n};\r\n\r\nexport const TodoItem = ({ todo, index, handleChange }) => {\r\n  const { removeTodo } = useContext(Context);\r\n  const calsses = [];\r\n\r\n  if (todo.completed) {\r\n    calsses.push(\"done\");\r\n  }\r\n  return (\r\n    <li style={styles.li}>\r\n      <span className={calsses.join(\" \")}>\r\n        <input\r\n          type=\"checkbox\"\r\n          checked={todo.completed}\r\n          style={styles.input}\r\n          onChange={() => handleChange(todo.id)}\r\n        />\r\n        <strong>{index + 1}</strong>\r\n        &nbsp;\r\n        {todo.title}\r\n      </span>\r\n      <button className=\"rm\" onClick={() => removeTodo(todo.id)}>\r\n        &times;\r\n      </button>\r\n    </li>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { TodoItem } from \"./TodoItem\";\r\n\r\nconst styles = {\r\n  ul: {\r\n    listStyle: \"none\",\r\n    margin: 0,\r\n    padding: 0,\r\n  },\r\n};\r\n\r\nexport const TodoList = (props) => {\r\n  return (\r\n    <ul style={styles.ul}>\r\n      {props.todos.map((todo, index) => {\r\n        return (\r\n          <TodoItem\r\n            todo={todo}\r\n            key={todo.id}\r\n            index={index}\r\n            handleChange={props.onToggle}\r\n          ></TodoItem>\r\n        );\r\n      })}\r\n    </ul>\r\n  );\r\n};\r\n","import React, { useState } from \"react\";\r\n\r\nexport const AddTodo = ({ onCreate }) => {\r\n  const [value, setValue] = useState(\"\");\r\n\r\n  const submitHandle = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (value.trim()) {\r\n      onCreate(value);\r\n      setValue(\"\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form\r\n      onSubmit={submitHandle}\r\n      style={{marginBottom: \"0.8rem\" }}\r\n    >\r\n      <input\r\n        placeholder=\"input todo here!\"\r\n        value={value}\r\n        onChange={({ target }) => setValue(target.value)}\r\n        className=\"addTodo-input\"\r\n      />\r\n      <button type=\"submit\" className=\"addTodo-submit\">\r\n        Add todo!\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n","import React, { useState } from \"react\";\nimport { TodoList } from \"./Todo/TodoList\";\nimport Context from \"./context\";\nimport { AddTodo } from \"./Todo/AddTodo\";\n\nfunction App() {\n  const [todos, setTodos] = useState([]);\n\n  const toggleTodo = (id) => {\n    setTodos(\n      todos.map((todo) => {\n        if (todo.id === id) {\n          todo.completed = !todo.completed;\n        }\n        return todo;\n      })\n    );\n  };\n\n  const removeTodo = (id) => {\n    setTodos(todos.filter((todo) => todo.id !== id));\n  };\n\n  const addTodo = (title) => {\n    setTodos(\n      todos.concat([\n        {\n          title,\n          id: Date.now(),\n          completed: false,\n        },\n      ])\n    );\n  };\n\n  return (\n    <Context.Provider value={{ removeTodo }}>\n      <div className=\"wrapper\">\n        <h1>Todo!</h1>\n        <AddTodo onCreate={addTodo}></AddTodo>\n        {todos.length ? (\n          <TodoList todos={todos} onToggle={toggleTodo}></TodoList>\n        ) : (\n          <p style={{ paddingLeft: \"1rem\" }}>No todos here!</p>\n        )}\n      </div>\n    </Context.Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}